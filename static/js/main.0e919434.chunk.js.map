{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","canvas","document","querySelector","renderer","THREE","antialias","camera","position","set","up","lookAt","scene","createSphericalMesh","radius","color","sphereGeometry","sphereMaterial","emissive","sphereMesh","add","mercuryMesh","mercuryPath","venusMesh","venusPath","updatePosition","mesh","path","time","timeFactor","getPointAt","x","y","requestAnimationFrame","render","domElement","width","clientWidth","height","clientHeight","needResize","setSize","resizeRendereToDisplaySize","aspect","updateProjectionMatrix","setTimeout","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"8NAiGeA,MA5Ff,WAqFE,OApFAC,qBAAU,WAER,IAAMC,EAASC,SAASC,cAAc,gBAChCC,EAAW,IAAIC,IAAoB,CAACJ,SAAQK,WAAW,IAOvDC,EAAS,IAAIF,IAJP,GACG,EACF,GACD,KAEZE,EAAOC,SAASC,IAAI,EAAG,EAAG,KAC1BF,EAAOG,GAAGD,IAAI,EAAG,EAAG,GACpBF,EAAOI,OAAO,EAAG,EAAG,GAGpB,IAAMC,EAAQ,IAAIP,IAElB,SAASQ,EAAoBC,EAAQC,GACnC,IAAMC,EAAiB,IAAIX,IAAqBS,EAAQ,GAAI,IACtDG,EAAiB,IAAIZ,IAAwB,CAACa,SAAUH,IACxDI,EAAa,IAAId,IAAWW,EAAgBC,GAGlD,OAFAE,EAAWX,SAASC,IAAI,EAAG,EAAG,GAC9BG,EAAMQ,IAAID,GACHA,EAION,EAAoB,GAAI,UAAxC,IAGMQ,EAAcR,EAAoB,EAAG,SACrCS,EAAc,IAAIjB,IAAmB,GAAI,GAAI,GAAI,IAGjDkB,EAAYV,EAAoB,EAAG,UACnCW,EAAY,IAAInB,IAAmB,GAAI,GAAI,GAAI,IAiBrD,SAASoB,EAAeC,EAAMC,EAAMC,EAAMC,GACxC,IAAMrB,EAAW,IAAIH,IACrBsB,EAAKG,WAAWF,EAAOC,EAAa,EAAGrB,GACvCkB,EAAKlB,SAASC,IAAID,EAASuB,EAAGvB,EAASwB,EAAG,GAyB5CC,uBAtBA,SAASC,EAAON,GAGd,GAFAA,GAAc,KArBhB,SAAoCxB,GAClC,IAAMH,EAASG,EAAS+B,WAClBC,EAAQnC,EAAOoC,YACfC,EAASrC,EAAOsC,aAEhBC,EAAaJ,IAAUnC,EAAOmC,OAASE,IAAWrC,EAAOqC,OAM/D,OAJGE,GACDpC,EAASqC,QAAQL,EAAOE,GAAQ,GAG3BE,EAYJE,CAA2BtC,GAAW,CACvC,IAAMH,EAASG,EAAS+B,WACxB5B,EAAOoC,OAAS1C,EAAOoC,YAAcpC,EAAOsC,aAC5ChC,EAAOqC,yBAITnB,EAAeJ,EAAaC,EAAaM,EAAM,IAG/CH,EAAeF,EAAWC,EAAWI,EAAM,KAE3CxB,EAAS8B,OAAOtB,EAAOL,GAEvBsC,YAAW,WACTZ,sBAAsBC,KACrB,SAIJ,IAGD,qBAAKY,UAAU,gBAAf,SACE,wBAAQC,GAAG,mBChFFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASvB,OACP,cAAC,IAAMwB,WAAP,UACE,cAAC,EAAD,MAEFxD,SAASyD,eAAe,SAM1BX,M","file":"static/js/main.0e919434.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport * as THREE from 'three';\n\nimport './App.css';\n\nfunction App() {\n  useEffect(() => {\n    // Renderer\n    const canvas = document.querySelector('#render-area');\n    const renderer = new THREE.WebGLRenderer({canvas, antialias: true});\n\n    // Camera\n    const fov = 75;\n    const aspect = 2;\n    const near = 0.1;\n    const far = 1000;\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.set(0, 0, 100);\n    camera.up.set(0, 0, 1);\n    camera.lookAt(0, 0, 0);\n\n    // Scene\n    const scene = new THREE.Scene();\n\n    function createSphericalMesh(radius, color) {\n      const sphereGeometry = new THREE.SphereGeometry(radius, 12, 12);\n      const sphereMaterial = new THREE.MeshPhongMaterial({emissive: color});\n      const sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n      sphereMesh.position.set(0, 0, 0);\n      scene.add(sphereMesh);\n      return sphereMesh;\n    }\n\n    // Sun\n    const sunMesh = createSphericalMesh(10, 0xFFFF00);\n\n    // Mercury\n    const mercuryMesh = createSphericalMesh(1, 0x666666);\n    const mercuryPath = new THREE.EllipseCurve(0, -10, 20, 30);\n\n    // Venus\n    const venusMesh = createSphericalMesh(1, 0xCCCCCC);\n    const venusPath = new THREE.EllipseCurve(0, -15, 30, 45);\n\n    // Render\n    function resizeRendereToDisplaySize(renderer) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      const needResize = width !== canvas.width || height !== canvas.height;\n\n      if(needResize) {\n        renderer.setSize(width, height, false);\n      }\n\n      return needResize;\n    }\n\n    function updatePosition(mesh, path, time, timeFactor) {\n      const position = new THREE.Vector2();\n      path.getPointAt(time * timeFactor % 1, position);\n      mesh.position.set(position.x, position.y, 0);\n    }\n\n    function render(time) {\n      time = time * 0.001;\n\n      if(resizeRendereToDisplaySize(renderer)) {\n        const canvas = renderer.domElement;\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\n        camera.updateProjectionMatrix();\n      }\n\n      // Mercury Position Update\n      updatePosition(mercuryMesh, mercuryPath, time, 0.5);\n\n      // Venus Position Update\n      updatePosition(venusMesh, venusPath, time, 0.25);\n\n      renderer.render(scene, camera);\n\n      setTimeout(() => {\n        requestAnimationFrame(render);\n      }, 16);\n    }\n\n    requestAnimationFrame(render);\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <canvas id=\"render-area\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}