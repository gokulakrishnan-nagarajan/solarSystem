{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","canvas","document","querySelector","renderer","THREE","antialias","camera","position","set","up","lookAt","scene","createSphericalMesh","radius","color","sphereGeometry","sphereMaterial","emissive","sphereMesh","add","mercuryMesh","mercuryPath","Math","PI","venusMesh","venusPath","earthMesh","earthPath","marsMesh","marsPath","jupiterMesh","jupiterPath","saturnMesh","saturnPath","uranusMesh","uranusPath","neptuneMesh","neptunePath","plutoMesh","plutoPath","updatePosition","mesh","path","time","timeFactor","getPointAt","x","y","requestAnimationFrame","render","domElement","width","clientWidth","height","clientHeight","needResize","setSize","resizeRendereToDisplaySize","aspect","updateProjectionMatrix","setTimeout","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.738b1e18.chunk.js","sourcesContent":["import { useEffect } from 'react';\nimport * as THREE from 'three';\n\nimport './App.scss';\n\nfunction App() {\n  useEffect(() => {\n    // Renderer\n    const canvas = document.querySelector('#render-area');\n    const renderer = new THREE.WebGLRenderer({canvas, antialias: true});\n\n    // Camera\n    const fov = 75;\n    const aspect = 2;\n    const near = 0.1;\n    const far = 1000;\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.set(0, 0, 150);\n    camera.up.set(0, 0, 1);\n    camera.lookAt(0, 0, 0);\n\n    // Scene\n    const scene = new THREE.Scene();\n\n    function createSphericalMesh(radius, color) {\n      const sphereGeometry = new THREE.SphereGeometry(radius, 12, 12);\n      const sphereMaterial = new THREE.MeshPhongMaterial({emissive: color});\n      const sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n      sphereMesh.position.set(0, 0, 0);\n      scene.add(sphereMesh);\n      return sphereMesh;\n    }\n\n    // Sun\n    const sunMesh = createSphericalMesh(10, 0xFFFF00);\n\n    // Mercury\n    const mercuryMesh = createSphericalMesh(1, 0x666666);\n    const mercuryPath = new THREE.EllipseCurve(0, -10, 20, 30, 0, Math.PI * 2);\n\n    // Venus\n    const venusMesh = createSphericalMesh(1.5, 0xCCCCCC);\n    const venusPath = new THREE.EllipseCurve(0, -15, 30, 45, Math.PI / 2, 5 * Math.PI / 2, true);\n\n    // Earth\n    const earthMesh = createSphericalMesh(1.5, 0x0000FF);\n    const earthPath = new THREE.EllipseCurve(0, -20, 40, 60, Math.PI, Math.PI * 3);\n\n    // Mars\n    const marsMesh = createSphericalMesh(1, 0xFF6633);\n    const marsPath = new THREE.EllipseCurve(0, -15, 50, 75, 3 * Math.PI / 2, 7 * Math.PI / 2);\n\n    // Jupiter\n    const jupiterMesh = createSphericalMesh(2.5, 0xFF9999);\n    const jupiterPath = new THREE.EllipseCurve(0, -15, 60, 90, 0, Math.PI * 2);\n\n    // Saturn\n    const saturnMesh = createSphericalMesh(2.5, 0xFFFFCC);\n    const saturnPath = new THREE.EllipseCurve(0, -15, 70, 105, Math.PI / 2, 5 * Math.PI / 2);\n\n    // Uranus\n    const uranusMesh = createSphericalMesh(2, 0xCCCCFF);\n    const uranusPath = new THREE.EllipseCurve(0, -15, 80, 120, Math.PI, Math.PI * 3);\n\n    // Neptune\n    const neptuneMesh = createSphericalMesh(2, 0x0000FF);\n    const neptunePath = new THREE.EllipseCurve(0, -15, 90, 135, 3 * Math.PI / 2, 7 * Math.PI / 2);\n\n    // Pluto\n    const plutoMesh = createSphericalMesh(1, 0xCCCCCC);\n    const plutoPath = new THREE.EllipseCurve(0, -15, 100, 150, 0, Math.PI * 2);\n\n    // Render\n    function resizeRendereToDisplaySize(renderer) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      const needResize = width !== canvas.width || height !== canvas.height;\n\n      if(needResize) {\n        renderer.setSize(width, height, false);\n      }\n\n      return needResize;\n    }\n\n    function updatePosition(mesh, path, time, timeFactor) {\n      const position = new THREE.Vector2();\n      path.getPointAt(time * timeFactor % 1, position);\n      mesh.position.set(position.x, position.y, 0);\n    }\n\n    function render(time) {\n      time = time * 0.001;\n\n      if(resizeRendereToDisplaySize(renderer)) {\n        const canvas = renderer.domElement;\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\n        camera.updateProjectionMatrix();\n      }\n\n      // Mercury Position Update\n      updatePosition(mercuryMesh, mercuryPath, time, 1/2);\n\n      // Venus Position Update\n      updatePosition(venusMesh, venusPath, time, 1/4);\n\n      // Earth Position Update\n      updatePosition(earthMesh, earthPath, time, 1/8);\n\n      // Mars Position Update\n      updatePosition(marsMesh, marsPath, time, 1/16);\n\n      // Jupiter Position Update\n      updatePosition(jupiterMesh, jupiterPath, time, 1/32);\n\n      // Saturn Position Update\n      updatePosition(saturnMesh, saturnPath, time, 1/64);\n\n      // Uranus Position Update\n      updatePosition(uranusMesh, uranusPath, time, 1/96);\n\n      // Neptune Position Update\n      updatePosition(neptuneMesh, neptunePath, time, 1/128);\n\n      // Pluto Position Update\n      updatePosition(plutoMesh, plutoPath, time, 1/160);\n\n      renderer.render(scene, camera);\n\n      setTimeout(() => {\n        requestAnimationFrame(render);\n      }, 16);\n    }\n\n    requestAnimationFrame(render);\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <canvas id=\"render-area\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}