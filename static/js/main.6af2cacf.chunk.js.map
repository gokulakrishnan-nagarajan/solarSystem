{"version":3,"sources":["assets/images/sun.jpeg","assets/images/mercury.jpeg","assets/images/venus.jpeg","assets/images/earth.jpeg","assets/images/mars.jpeg","assets/images/jupiter.jpeg","assets/images/saturn.jpeg","assets/images/uranus.jpeg","assets/images/neptune.jpeg","assets/images/pluto.jpeg","assets/images/stars.jpeg","App.js","reportWebVitals.js","index.js"],"names":["App","useEffect","canvas","document","querySelector","renderer","THREE","antialias","camera","position","set","up","lookAt","textureLoader","scene","createSphericalMesh","radius","texture","sphereGeometry","sphereMaterial","map","load","sphereMesh","add","background","StarsTexture","sunMesh","SunTexture","mercuryMesh","MercuryTexture","mercuryPath","Math","PI","venusMesh","VenusTexture","venusPath","earthMesh","EarthTexture","earthPath","marsMesh","MarsTexture","marsPath","jupiterMesh","JupiterTexture","jupiterPath","saturnMesh","SaturnTexture","saturnPath","uranusMesh","UranusTexture","uranusPath","neptuneMesh","NeptuneTexture","neptunePath","plutoMesh","PlutoTexture","plutoPath","updatePosition","mesh","path","time","timeFactor","getPointAt","x","y","rotation","z","requestAnimationFrame","render","domElement","width","clientWidth","height","clientHeight","needResize","setSize","resizeRendereToDisplaySize","aspect","updateProjectionMatrix","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"+MAAe,MAA0B,iCCA1B,MAA0B,qCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,kCCA1B,MAA0B,qCCA1B,MAA0B,oCCA1B,MAA0B,oCCA1B,MAA0B,qCCA1B,MAA0B,mCCA1B,MAA0B,mC,eCsK1BA,MArJf,WA8IE,OA7IAC,qBAAU,WAER,IAAMC,EAASC,SAASC,cAAc,gBAChCC,EAAW,IAAIC,IAAoB,CAACJ,SAAQK,WAAW,IAOvDC,EAAS,IAAIF,IAJP,GACG,EACF,GACD,KAEZE,EAAOC,SAASC,IAAI,EAAG,EAAG,KAC1BF,EAAOG,GAAGD,IAAI,EAAG,EAAG,GACpBF,EAAOI,OAAO,EAAG,EAAG,GAGpB,IAAMC,EAAgB,IAAIP,IAGpBQ,EAAQ,IAAIR,IAIlB,SAASS,EAAT,GAAiD,IAAnBC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,QAC9BC,EAAiB,IAAIZ,IAAqBU,EAAQ,GAAI,IACtDG,EAAiB,IAAIb,IAAwB,CAACc,IAAKP,EAAcQ,KAAKJ,KACtEK,EAAa,IAAIhB,IAAWY,EAAgBC,GAGlD,OAFAG,EAAWb,SAASC,IAAI,EAAG,EAAG,GAC9BI,EAAMS,IAAID,GACHA,EATTR,EAAMU,WAAaX,EAAcQ,KAAKI,GAatC,IAAMC,EAAUX,EAAoB,CAAEC,OAAQ,GAAIC,QAASU,IAGrDC,EAAcb,EAAoB,CAACC,OAAQ,EAAGC,QAASY,IACvDC,EAAc,IAAIxB,IAAmB,GAAI,GAAI,GAAI,GAAI,EAAa,EAAVyB,KAAKC,IAG7DC,EAAYlB,EAAoB,CAACC,OAAQ,IAAKC,QAASiB,IACvDC,EAAY,IAAI7B,IAAmB,GAAI,GAAI,GAAI,GAAIyB,KAAKC,GAAK,EAAG,EAAID,KAAKC,GAAK,GAAG,GAGjFI,EAAYrB,EAAoB,CAACC,OAAQ,IAAKC,QAASoB,IACvDC,EAAY,IAAIhC,IAAmB,GAAI,GAAI,GAAI,GAAIyB,KAAKC,GAAc,EAAVD,KAAKC,IAGjEO,EAAWxB,EAAoB,CAACC,OAAQ,EAAGC,QAASuB,IACpDC,EAAW,IAAInC,IAAmB,GAAI,GAAI,GAAI,GAAI,EAAIyB,KAAKC,GAAK,EAAG,EAAID,KAAKC,GAAK,GAGjFU,EAAc3B,EAAoB,CAACC,OAAQ,IAAKC,QAAS0B,IACzDC,EAAc,IAAItC,IAAmB,GAAI,GAAI,GAAI,GAAI,EAAa,EAAVyB,KAAKC,IAG7Da,EAAa9B,EAAoB,CAACC,OAAQ,IAAKC,QAAS6B,IACxDC,EAAa,IAAIzC,IAAmB,GAAI,GAAI,GAAI,IAAKyB,KAAKC,GAAK,EAAG,EAAID,KAAKC,GAAK,GAGhFgB,EAAajC,EAAoB,CAACC,OAAQ,EAAGC,QAASgC,IACtDC,EAAa,IAAI5C,IAAmB,GAAI,GAAI,GAAI,IAAKyB,KAAKC,GAAc,EAAVD,KAAKC,IAGnEmB,EAAcpC,EAAoB,CAACC,OAAQ,EAAGC,QAASmC,IACvDC,EAAc,IAAI/C,IAAmB,GAAI,GAAI,GAAI,IAAK,EAAIyB,KAAKC,GAAK,EAAG,EAAID,KAAKC,GAAK,GAGrFsB,EAAYvC,EAAoB,CAACC,OAAQ,EAAGC,QAASsC,IACrDC,EAAY,IAAIlD,IAAmB,GAAI,GAAI,IAAK,IAAK,EAAa,EAAVyB,KAAKC,IAiBnE,SAASyB,EAAeC,EAAMC,EAAMC,EAAMC,GACxC,IAAMpD,EAAW,IAAIH,IACrBqD,EAAKG,WAAWF,EAAOC,EAAa,EAAGpD,GACvCiD,EAAKjD,SAASC,IAAID,EAASsD,EAAGtD,EAASuD,EAAG,GAE1CN,EAAKO,SAASC,EAAIN,EA+CpBO,uBA5CA,SAASC,EAAOR,GAGd,GAFAA,GAAc,KAvBhB,SAAoCvD,GAClC,IAAMH,EAASG,EAASgE,WAClBC,EAAQpE,EAAOqE,YACfC,EAAStE,EAAOuE,aAEhBC,EAAaJ,IAAUpE,EAAOoE,OAASE,IAAWtE,EAAOsE,OAM/D,OAJGE,GACDrE,EAASsE,QAAQL,EAAOE,GAAQ,GAG3BE,EAcJE,CAA2BvE,GAAW,CACvC,IAAMH,EAASG,EAASgE,WACxB7D,EAAOqE,OAAS3E,EAAOqE,YAAcrE,EAAOuE,aAC5CjE,EAAOsE,yBAITpD,EAAQuC,SAASC,EAAIN,EAGrBH,EAAe7B,EAAaE,EAAa8B,EAAM,IAG/CH,EAAexB,EAAWE,EAAWyB,EAAM,EAAE,GAG7CH,EAAerB,EAAWE,EAAWsB,EAAM,EAAE,GAG7CH,EAAelB,EAAUE,EAAUmB,EAAM,EAAE,IAG3CH,EAAef,EAAaE,EAAagB,EAAM,EAAE,IAGjDH,EAAeZ,EAAYE,EAAYa,EAAM,EAAE,IAG/CH,EAAeT,EAAYE,EAAYU,EAAM,EAAE,IAG/CH,EAAeN,EAAaE,EAAaO,EAAM,EAAE,KAGjDH,EAAeH,EAAWE,EAAWI,EAAM,EAAE,KAE7CvD,EAAS+D,OAAOtD,EAAON,GAEvB2D,sBAAsBC,QAIvB,IAGD,qBAAKW,UAAU,gBAAf,SACE,wBAAQC,GAAG,mBCrJFC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAAStB,OACP,cAAC,IAAMuB,WAAP,UACE,cAAC,EAAD,MAEFxF,SAASyF,eAAe,SAM1BX,M","file":"static/js/main.6af2cacf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/sun.4b569137.jpeg\";","export default __webpack_public_path__ + \"static/media/mercury.8f80953b.jpeg\";","export default __webpack_public_path__ + \"static/media/venus.b2e12742.jpeg\";","export default __webpack_public_path__ + \"static/media/earth.981cc3e3.jpeg\";","export default __webpack_public_path__ + \"static/media/mars.33960f5a.jpeg\";","export default __webpack_public_path__ + \"static/media/jupiter.3e84533e.jpeg\";","export default __webpack_public_path__ + \"static/media/saturn.3b074d8e.jpeg\";","export default __webpack_public_path__ + \"static/media/uranus.428ad3f9.jpeg\";","export default __webpack_public_path__ + \"static/media/neptune.6dd11266.jpeg\";","export default __webpack_public_path__ + \"static/media/pluto.8f80953b.jpeg\";","export default __webpack_public_path__ + \"static/media/stars.9704bf44.jpeg\";","import { useEffect } from 'react';\nimport * as THREE from 'three';\n\nimport SunTexture from '../src/assets/images/sun.jpeg';\nimport MercuryTexture from '../src/assets/images/mercury.jpeg';\nimport VenusTexture from '../src/assets/images/venus.jpeg';\nimport EarthTexture from '../src/assets/images/earth.jpeg';\nimport MarsTexture from '../src/assets/images/mars.jpeg';\nimport JupiterTexture from '../src/assets/images/jupiter.jpeg';\nimport SaturnTexture from '../src/assets/images/saturn.jpeg';\nimport UranusTexture from '../src/assets/images/uranus.jpeg';\nimport NeptuneTexture from '../src/assets/images/neptune.jpeg';\nimport PlutoTexture from '../src/assets/images/pluto.jpeg';\nimport StarsTexture from '../src/assets/images/stars.jpeg';\n\nimport './App.scss';\n\nfunction App() {\n  useEffect(() => {\n    // Renderer\n    const canvas = document.querySelector('#render-area');\n    const renderer = new THREE.WebGLRenderer({canvas, antialias: true});\n\n    // Camera\n    const fov = 75;\n    const aspect = 2;\n    const near = 0.1;\n    const far = 1000;\n    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);\n    camera.position.set(0, 0, 150);\n    camera.up.set(0, 0, 1);\n    camera.lookAt(0, 0, 0);\n\n    // Texture Loader\n    const textureLoader = new THREE.TextureLoader();\n\n    // Scene\n    const scene = new THREE.Scene();\n    scene.background = textureLoader.load(StarsTexture);\n\n    // Mesh Creator\n    function createSphericalMesh({radius, texture}) {\n      const sphereGeometry = new THREE.SphereGeometry(radius, 24, 24);\n      const sphereMaterial = new THREE.MeshBasicMaterial({map: textureLoader.load(texture)});\n      const sphereMesh = new THREE.Mesh(sphereGeometry, sphereMaterial);\n      sphereMesh.position.set(0, 0, 0);\n      scene.add(sphereMesh);\n      return sphereMesh;\n    }\n\n    // Sun\n    const sunMesh = createSphericalMesh({ radius: 10, texture: SunTexture});\n\n    // Mercury\n    const mercuryMesh = createSphericalMesh({radius: 1, texture: MercuryTexture});\n    const mercuryPath = new THREE.EllipseCurve(0, -10, 20, 30, 0, Math.PI * 2);\n\n    // Venus\n    const venusMesh = createSphericalMesh({radius: 1.5, texture: VenusTexture});\n    const venusPath = new THREE.EllipseCurve(0, -15, 30, 45, Math.PI / 2, 5 * Math.PI / 2, true);\n\n    // Earth\n    const earthMesh = createSphericalMesh({radius: 1.5, texture: EarthTexture});\n    const earthPath = new THREE.EllipseCurve(0, -20, 40, 60, Math.PI, Math.PI * 3);\n\n    // Mars\n    const marsMesh = createSphericalMesh({radius: 1, texture: MarsTexture});\n    const marsPath = new THREE.EllipseCurve(0, -15, 50, 75, 3 * Math.PI / 2, 7 * Math.PI / 2);\n\n    // Jupiter\n    const jupiterMesh = createSphericalMesh({radius: 2.5, texture: JupiterTexture});\n    const jupiterPath = new THREE.EllipseCurve(0, -15, 60, 90, 0, Math.PI * 2);\n\n    // Saturn\n    const saturnMesh = createSphericalMesh({radius: 2.5, texture: SaturnTexture});\n    const saturnPath = new THREE.EllipseCurve(0, -15, 70, 105, Math.PI / 2, 5 * Math.PI / 2);\n\n    // Uranus\n    const uranusMesh = createSphericalMesh({radius: 2, texture: UranusTexture});\n    const uranusPath = new THREE.EllipseCurve(0, -15, 80, 120, Math.PI, Math.PI * 3);\n\n    // Neptune\n    const neptuneMesh = createSphericalMesh({radius: 2, texture: NeptuneTexture});\n    const neptunePath = new THREE.EllipseCurve(0, -15, 90, 135, 3 * Math.PI / 2, 7 * Math.PI / 2);\n\n    // Pluto\n    const plutoMesh = createSphericalMesh({radius: 1, texture: PlutoTexture});\n    const plutoPath = new THREE.EllipseCurve(0, -15, 100, 150, 0, Math.PI * 2);\n\n    // Render\n    function resizeRendereToDisplaySize(renderer) {\n      const canvas = renderer.domElement;\n      const width = canvas.clientWidth;\n      const height = canvas.clientHeight;\n\n      const needResize = width !== canvas.width || height !== canvas.height;\n\n      if(needResize) {\n        renderer.setSize(width, height, false);\n      }\n\n      return needResize;\n    }\n\n    function updatePosition(mesh, path, time, timeFactor) {\n      const position = new THREE.Vector2();\n      path.getPointAt(time * timeFactor % 1, position);\n      mesh.position.set(position.x, position.y, 0);\n\n      mesh.rotation.z = time;\n    }\n\n    function render(time) {\n      time = time * 0.001;\n\n      if(resizeRendereToDisplaySize(renderer)) {\n        const canvas = renderer.domElement;\n        camera.aspect = canvas.clientWidth / canvas.clientHeight;\n        camera.updateProjectionMatrix();\n      }\n\n      //Sun Position Update\n      sunMesh.rotation.z = time;\n\n      // Mercury Position Update\n      updatePosition(mercuryMesh, mercuryPath, time, 1/2);\n\n      // Venus Position Update\n      updatePosition(venusMesh, venusPath, time, 1/4);\n\n      // Earth Position Update\n      updatePosition(earthMesh, earthPath, time, 1/8);\n\n      // Mars Position Update\n      updatePosition(marsMesh, marsPath, time, 1/16);\n\n      // Jupiter Position Update\n      updatePosition(jupiterMesh, jupiterPath, time, 1/32);\n\n      // Saturn Position Update\n      updatePosition(saturnMesh, saturnPath, time, 1/64);\n\n      // Uranus Position Update\n      updatePosition(uranusMesh, uranusPath, time, 1/96);\n\n      // Neptune Position Update\n      updatePosition(neptuneMesh, neptunePath, time, 1/128);\n\n      // Pluto Position Update\n      updatePosition(plutoMesh, plutoPath, time, 1/160);\n\n      renderer.render(scene, camera);\n\n      requestAnimationFrame(render);\n    }\n\n    requestAnimationFrame(render);\n  }, []);\n\n  return (\n    <div className=\"app-container\">\n      <canvas id=\"render-area\"></canvas>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}